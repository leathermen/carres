plugins {
  id 'java'
  id 'org.springframework.boot' version '3.0.2'
  id 'io.spring.dependency-management' version '1.1.3'
  id 'io.freefair.lombok' version '8.2.2'

  id 'org.sonarqube' version '4.3.0.3225'
  // id 'org.liquibase.gradle' version '2.2.0'
  id 'jacoco'
}

group = 'com.nikitades'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
      languageVersion = JavaLanguageVersion.of(20)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-devtools'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-amqp'

  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

  implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'

  //bound projects
  implementation project('shared')

  // keycloak admin client
  implementation 'org.keycloak:keycloak-admin-client:22.0.1'

  runtimeOnly 'org.postgresql:postgresql'
  runtimeOnly 'com.h2database:h2'

  runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

  implementation 'org.flywaydb:flyway-core:9.19.4'

  annotationProcessor 'org.projectlombok:lombok'
  compileOnly 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.instancio:instancio-junit:3.1.0'
  testImplementation 'org.springframework.amqp:spring-rabbit-test'


  testAnnotationProcessor 'org.projectlombok:lombok'
  testCompileOnly 'org.projectlombok:lombok'
}

tasks.named("test") {
  useJUnitPlatform()
}

tasks.jacocoTestReport {
  dependsOn(tasks.test)
  reports {
    xml.required.set(true)
    csv.required.set(false)
    html.required.set(false)
  }
}

sonarqube {
  properties {
    property('sonar.projectKey', 'leathermen_carres_api')
    property('sonar.organization', 'leathermen')
    property('sonar.exclusions', '**/main/resources/db/**')
    property('sonar.coverage.exclusions', '**/*Config.java')
    property('sonar.sources', 'src/main/')
    property('sonar.tests', 'src/test/')
    property('sonar.java.source', '20')
    property('sonar.projectName', 'Cars Reservation API')
    property('sonar.host.url', 'https://sonarcloud.io')
  }
}
